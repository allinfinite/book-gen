import {
  Document,
  Packer,
  Paragraph,
  TextRun,
  HeadingLevel,
  AlignmentType,
  ImageRun,
  PageBreak,
  convertInchesToTwip,
} from "docx";
import { BookProject } from "@/types/book";
import { getMedia } from "@/lib/idb";

/**
 * Generate a Word document (.docx) with images
 */
export async function generateDOCX(project: BookProject): Promise<Blob> {
  const sections: any[] = [];

  // Helper to convert HTML to plain text
  const htmlToText = (html: string): string => {
    if (!html) return "";
    return html
      .replace(/<[^>]+>/g, "")
      .replace(/&nbsp;/g, " ")
      .replace(/&amp;/g, "&")
      .replace(/&lt;/g, "<")
      .replace(/&gt;/g, ">")
      .replace(/&quot;/g, '"')
      .replace(/&#39;/g, "'")
      .trim();
  };

  // Title Page
  const titlePageChildren: any[] = [];

  // Add cover image if exists
  if (project.coverImageId) {
    try {
      const mediaBlob = await getMedia(project.coverImageId);
      if (mediaBlob) {
        titlePageChildren.push(
          new Paragraph({
            children: [
              new ImageRun({
                data: mediaBlob.bytes,
                transformation: {
                  width: 300,
                  height: 450,
                },
              }),
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 400 },
          })
        );
      }
    } catch (err) {
      console.error("Failed to add cover image:", err);
    }
  }

  // Title
  titlePageChildren.push(
    new Paragraph({
      text: project.meta.title,
      heading: HeadingLevel.TITLE,
      alignment: AlignmentType.CENTER,
      spacing: { after: 200 },
    })
  );

  // Subtitle
  if (project.meta.subtitle) {
    titlePageChildren.push(
      new Paragraph({
        text: project.meta.subtitle,
        alignment: AlignmentType.CENTER,
        spacing: { after: 200 },
      })
    );
  }

  // Author
  titlePageChildren.push(
    new Paragraph({
      text: `by ${project.meta.authorName || "Unknown Author"}`,
      alignment: AlignmentType.CENTER,
      spacing: { after: 400 },
    })
  );

  // Copyright Page
  const year = new Date().getFullYear();
  titlePageChildren.push(
    new Paragraph({
      children: [new PageBreak()],
    }),
    new Paragraph({
      text: "Copyright",
      heading: HeadingLevel.HEADING_1,
      spacing: { after: 200 },
    }),
    new Paragraph({
      text: project.meta.title,
      spacing: { after: 100 },
    }),
    new Paragraph({
      text: `Copyright Â© ${year} by ${project.meta.authorName || "Unknown Author"}`,
      spacing: { after: 100 },
    }),
    new Paragraph({
      text: "All rights reserved. No part of this book may be reproduced in any form or by any electronic or mechanical means, including information storage and retrieval systems, without written permission from the author, except for the use of brief quotations in a book review.",
      spacing: { after: 100 },
    }),
    new Paragraph({
      text: "Generated by BookGen",
      spacing: { after: 200 },
    })
  );

  // Table of Contents
  titlePageChildren.push(
    new Paragraph({
      children: [new PageBreak()],
    }),
    new Paragraph({
      text: "Table of Contents",
      heading: HeadingLevel.HEADING_1,
      spacing: { after: 200 },
    })
  );

  project.chapters.forEach((chapter, index) => {
    titlePageChildren.push(
      new Paragraph({
        text: `Chapter ${index + 1}: ${chapter.title}`,
        spacing: { after: 100 },
      })
    );
  });

  // Add title page section
  sections.push({
    children: titlePageChildren,
  });

  // Chapters
  for (let chapterIndex = 0; chapterIndex < project.chapters.length; chapterIndex++) {
    const chapter = project.chapters[chapterIndex];
    const chapterChildren: any[] = [];

    // Chapter title
    chapterChildren.push(
      new Paragraph({
        children: [new PageBreak()],
      }),
      new Paragraph({
        text: `Chapter ${chapterIndex + 1}`,
        heading: HeadingLevel.HEADING_1,
        alignment: AlignmentType.CENTER,
        spacing: { after: 200 },
      }),
      new Paragraph({
        text: chapter.title,
        heading: HeadingLevel.HEADING_2,
        alignment: AlignmentType.CENTER,
        spacing: { after: 400 },
      })
    );

    // Add chapter image if exists
    if (chapter.imageId) {
      try {
        const mediaBlob = await getMedia(chapter.imageId);
        if (mediaBlob) {
          chapterChildren.push(
            new Paragraph({
              children: [
                new ImageRun({
                  data: mediaBlob.bytes,
                  transformation: {
                    width: 250,
                    height: 250,
                  },
                }),
              ],
              alignment: AlignmentType.CENTER,
              spacing: { after: 400 },
            })
          );
        }
      } catch (err) {
        console.error(`Failed to add chapter ${chapterIndex + 1} image:`, err);
      }
    }

    // Sections
    for (const section of chapter.sections) {
      // Section title
      if (section.title && section.title !== "Opening") {
        chapterChildren.push(
          new Paragraph({
            text: section.title,
            heading: HeadingLevel.HEADING_3,
            spacing: { before: 400, after: 200 },
          })
        );
      }

      // Add section images if they exist
      if (section.images && section.images.length > 0) {
        for (const img of section.images) {
          try {
            const mediaBlob = await getMedia(img.id);
            if (mediaBlob) {
              chapterChildren.push(
                new Paragraph({
                  children: [
                    new ImageRun({
                      data: mediaBlob.bytes,
                      transformation: {
                        width: 200,
                        height: 200,
                      },
                    }),
                  ],
                  alignment: AlignmentType.CENTER,
                  spacing: { after: 100 },
                })
              );

              // Add caption if available
              if (img.caption) {
                chapterChildren.push(
                  new Paragraph({
                    children: [
                      new TextRun({
                        text: img.caption,
                        italics: true,
                      }),
                    ],
                    alignment: AlignmentType.CENTER,
                    spacing: { after: 200 },
                  })
                );
              }
            }
          } catch (err) {
            console.error(`Failed to add section image:`, err);
          }
        }
      }

      // Section content
      if (section.content) {
        const plainText = htmlToText(section.content);
        const paragraphs = plainText
          .split(/\n\n+/)
          .map((p) => p.trim())
          .filter((p) => p.length > 0);

        paragraphs.forEach((paragraph) => {
          chapterChildren.push(
            new Paragraph({
              text: paragraph,
              spacing: { after: 200 },
              indent: {
                firstLine: convertInchesToTwip(0.5),
              },
            })
          );
        });
      }
    }

    sections.push({
      children: chapterChildren,
    });
  }

  // Create document
  const doc = new Document({
    sections: sections,
    creator: project.meta.authorName || "Unknown Author",
    title: project.meta.title,
    description: project.premise || "",
  });

  // Generate blob
  const blob = await Packer.toBlob(doc);
  return blob;
}

/**
 * Download the DOCX file
 */
export function downloadDOCX(blob: Blob, filename: string): void {
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `${filename}.docx`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

